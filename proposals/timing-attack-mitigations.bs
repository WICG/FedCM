
The following are mitigations under investigation.

<!-- ============================================================ -->
#### Heuristics #### {#timing-attack-heuristics}
<!-- ============================================================ -->

One mitigation under investigation is to try to use heuristics to limit the attack surface:

* Any [=RP=]s or [=IDP=]s observed to be using this API to compromise user privacy in a deceptive or
    abusive manner could be explicitly blocked from using it or put behind an interstitial.
* The [=user agent=] could detect [=trackers=] by noting alleged [=IDP=]s that do either of the
    following:
    * Never show UI despite the FedCM API fetches being performed.
    * Provide generic user identification, such as "Anonymous", or "Guest" or "Incognito" as the
        user's name.
    * Have a suspiciously low click-through rate (e.g. most users don't recognize the value in using
        this [=IDP=]).
* The [=user agent=] could block the API or show a static interstitial after the user has already
    expressed lack of interest in the API because they did at least one of the following:
    * Repeatedly ignored the FedCM API in the past in a similar scenario.
    * Provide user settings to disable the FedCM API.
    * Pressed some [=user agent=] UI to close the FedCM API's request for permission.
* The [=user agent=] could gate the FedCM fetches on a user interaction so that the timing attack is
    only possible once the user has expressed some interest in the API. Note that this may provide a
    poor user experience for users that do want to use the API, and may also result in worse success
    metrics for the API.

<!-- ============================================================ -->
#### Push Model #### {#push-model-mitigation}
<!-- ============================================================ -->

Another potential future mitigation for timing attacks is the [=push model=]. The current API is the
<dfn>pull model</dfn>: the API pulls the user accounts from the [=IDP=] every time they are needed
by the FedCM API. In the <dfn>push model</dfn>, the [=IDP=] needs to tell the [=user agent=] that a
user has signed in whenever this happens. This way, when the FedCM API is called, the [=user agent=]
already knows the user accounts that the user can select from, and thus does not require any
credentialed fetches to the [=IDP=] in order to show the UI. It would only be when the user
grants permission that the [=IDP=] is notified, thus resolving the timing attack problem entirely.

While the [=push model=] seems like an improvement for privacy, the current API uses the
[=pull model=] for these reasons:

* It introduces a lot of complexity for the [=IDP=]s, as they now need to declare the user accounts
    and keep them updated all the time. In particular, they need to be updated when a user logs out,
    deletes their account or simply change name, etc. A user can also use browser UX to logout, e.g.
    by clearing cookies. While those are not high-frequency changes (e.g. once every other year for
    each user), keeping them in sync is non-trivial.
* It requires a lot of the [=IDP=]'s trust in [=user agent=] to protect all of their user's
    accounts. The push model requires storing all of the user accounts from all of the [=IDP=]s that
    a user is logged into, regardless of whether the user ever uses the FedCM API or not. This means
    that all users pay the cost, and only some get the reward.

<!-- ============================================================ -->
##### The IdP Sign-in Status API ##### {#the-idp-sign-in-status-api}
<!-- ============================================================ -->

Note: The API specified in this section is not launched in any user agent,
and as such should be considered very experimental and subject to change.

Issue: this is a more formal description of what is proposed [here](https://github.com/fedidcg/FedCM/issues/230#issuecomment-1233290946).

A strict subset of the [=push model=] that seems promising is to only push
the user's sign-in status in the IdP (as opposed to the entirety of the user's account data,
e.g. name, email).

Since the sign-in status is specific to a browser instance/profile, this bit can reflect reality
almost perfectly (with the exception of server-side invalidations, e.g. users changing password, and
deleting accounts on other devices).

Importantly, sign-in status seems easier to degrade gracefully when the client-side state is inconsistent with the server-side state: re-authentication UX. The user's profile information, on the other hand, has a series of legal freshness requirements that are still not quite well understood.

So, in this variation, the [=user agent=] does two things: (a) it stores the user's login status at each [=IDP=] and (b) exposes APIs that allows [=IDP=]s to change them.

This is a compelling variation because (a) it is comparably simpler to implement by [=IDPs=] and (b)
if the [=user agent=] knew whether the user is signed-in or not to the [=IDP=], it can guarantee that
a user prompt will always be displayed, which makes the timing attack much less viable to be performed
invisibly (i.e. without any explicit and observable indication to the user).

<script type="text/typogram">
.---------------------------------.    .---------------------------------.    .---------------------------------.
| .-----------------------------. |    | .-----------------------------. |    | .-----------------------------. |
| | "https://idp.example"       | |    | | "https://idp.example"       | |    | | "https://idp.example"       | |
| '-----------------------------' |    | '-----------------------------' |    | '-----------------------------' |
| .-----------------------------. |    | .-----------------------------. |    | .-----------------------------. |
| |                             | |    | |                     logout -+-+-+  | |                             | |
| |   Sign-in                   | |    | |  Welcome, Sam!      ------  | | |  | |  Bye!                       | |
| |                             | |    | |                             | | |  | |                             | |
| |   username                  | |    | |                             | | |  | |                             | |
| |  +-----------------------+  | |    | | "// calls"                  | | |  | | "// calls"                  | |
| |  | you@email.com         |  | | +--+-+>"IdentityProvider.login();" | | +--+-+>"IdentityProvider.logout();"| |
| |  +-----------------------+  | | |  | |                     :       | |    | |                     :       | |
| |   password                  | | |  | |                     :       | |    | |                     :       | |
| |  +-----------------------+  | | |  | |                     :       | |    | |                     :       | |
| |  |"**********"           |  | | |  | |                     :       | |    | |                     :       | |
| |  +-----------------------+  | | |  | |                     :       | |    | |                     :       | |
| |                             | | |  | |                     :       | |    | |                     :       | |
| |  +-----------------------+  | | |  | |                     :       | |    | |                     :       | |
| |  |       Sign-in         +--+-+-+  | |                     :       | |    | |                     :       | |
| |  +-----------------------+  | |    | |                     :       | |    | |                     :       | |
| |                             | |    | |                     :       | |    | |                     :       | |
| '-----------------------------' |    | '---------------------:-------' |    | '---------------------:-------' |
'---------------------------------'    '-----------------------:---------'    '-----------------------:---------'
                                                               :                                      :
                                                               +~~~~+    +~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
                                                                    :    :
                                                                    v    v
                                       +-----------------------+-----------------+
                                       |  Identity Provider    | Sign-in Status  |
                                       +-----------------------+-----------------+
                                       | "..."                 | "..."           |
                                       +-----------------------+-----------------+
                                       | "https://idp.example" | Signed-in       |
                                       +-----------------------+-----------------+
                                       | "..."                 | "..."           |
                                       +-----------------------+-----------------+

</script>

Internally, each [=user agent=] keeps track of a global <dfn>Sign-in Status</dfn> map per [=IDP=],
initially an empty [=map=]. The [=map/keys=] in the [=Sign-in Status=] map is the [=/origin=] of the
[=IDP=]. The [=map/values=] in the [=Sign-in Status=] map are <b>status</b> objects which can be one
of the following values:

<dl dfn-type="argument" dfn-for="Sign-in Status">
    :   <dfn>unknown</dfn> (default)
    ::  By default, the [=user agent=] assumes that the user's signed in status is undefined.
    :   <dfn>signed-in</dfn>
    ::  The user has explicitly signed-in to the IDP.
    :   <dfn>signed-out</dfn>
    ::  The user has explicitly signed-out to the IDP.
</dl>

The [=IDPs=] are provided with an API that allows them to set their [=Sign-in Status=].

<xmp class=idl>
[Exposed=Window, SecureContext]
interface IdentityProvider {
  static undefined login();
  static undefined logout();
};
</xmp>

<div algorithm=login>
When the {{IdentityProvider/login()}} static method is invoked the user agent MUST execute the following
steps:
    1. Let |origin| be the [=current settings object=]'s [=environment settings object/origin=].
    1. Set the [=Sign-in Status=] of the |origin| to {{Sign-in Status/signed-in}}.
</div>

<div algorithm=logout>
When the {{IdentityProvider/logout()}} static method is invoked the user agent MUST execute the following
steps:
    1. Let |origin| be the [=current settings object=]'s [=environment settings object/origin=].
    1. Set the [=Sign-in Status=] of the |origin| to {{Sign-in Status/signed-out}}.
</div>

For example:

<div class="example">
A possible JS API that allows IDPs to set their Sign-in Status.
```js
IdentityProvider.login();
// ... later ...
IdentityProvider.logout();
```
</div>

For convenience and compatibility with existing deployed flows, the [=user agent=] also exposes the ability for [=IDPs=] to control their [=Sign-in Status=] via HTTP headers:

<div class="example">
A possible HTTP header API that allows IDPs to set their Sign-in Status.
```http
IdP-Sign-in-Status: action=login
// ... later ...
IdP-Sign-in-Status: action=logout
```
</div>

When site data (e.g. cookies) are cleared manually by the user, the [=user agent=] also sets the [=Sign-in Status=] to {{Sign-in Status/unknown}}.

IDPs are also offered an extension to the {{IdentityProviderAPIConfig}} object to include:

<dl dfn-type="argument" dfn-for="IdentityProviderAPIConfig">
    :   <dfn>signin_url</dfn> (optional)
    ::  A URL that allows a user to sign-in to the [=IDP=].
</dl>

The [=user agent=] uses the following [=maybe fetch the accounts list=] instead of the [=fetch the accounts list=] algorithm. It would also return early on if the user was {{Sign-in Status/signed-out}}.

<div algorithm>
To <dfn>maybe fetch the accounts list</dfn> given an {{IdentityProviderAPIConfig}} |config|, an {{IdentityProviderConfig}}
|provider|, and a |globalObject|, run the following steps. This returns a [=list=].

    1. Let |configUrl| be the result of running [=parse url=] with |provider|'s
        {{IdentityProviderConfig/configURL}} and |globalObject|.
    1. Let |idpOrigin| be the origin corresponding to |configUrl|.
    1. Let |status| be the [=Sign-in Status=] of the |idpOrigin|.
    1. If |status| is {{Sign-in Status/unknown}}:
        1. Let |accounts| be the result of the [=fetch the accounts list=] algorithm given |config| and |provider|.
        1. Set the [=Sign-in Status=] of the |idpOrigin| to {{Sign-in Status/signed-in}} if |accounts| is non-empty, {{Sign-in Status/signed-out}} otherwise.

        NOTE: This handles the case where the [=IDP=] hasn't had the chance to call the API before the accounts list is needed. This can incur into a timing attack, but it is limited to 1 per [=IDP=] per [=user agent=], so not very practical. Albeit small, removing this attack surface is an active area of investigation.

    1. If |status| is {{Sign-in Status/signed-out}}:
        1. Return an empty list.

        NOTE: By terminating the request here before running [=fetch the accounts list=] algorithm we prevent the timing attack to be performed without any user prompt.

    1. If |status| is {{Sign-in Status/signed-in}}:
        1. Let |accounts| be the result of the [=fetch the accounts list=] algorithm given |config| and |provider|.
        1. If |accounts|'s size is 0:
            1. Set the [=Sign-in Status=] of the |idpOrigin| to {{Sign-in Status/signed-out}}.
            1. Ask the user to confirm they want to sign-in to their [=IDP=].
            1. If they decline, return an empty list.
            1. Return the result of running the [=Sign-in to the IDP=] algorithm given |config| and |provider|.

            NOTE: This can happen when the user's local client credentials are invalidated on the server (e.g. changing passwords or deleting accounts on a different device), or we get network errors (e.g. timeouts, failures, etc).

        1. Return |accounts|.
</div>

<div algorithm>
To <dfn>Sign-in to the IDP</dfn> given an {{IdentityProviderAPIConfig}} |config| and an {{IdentityProviderConfig}}
|provider|. This returns a [=list=].
    1. Let |configUrl| be the result of running [=parse url=] with |provider|'s
        {{IdentityProviderConfig/configURL}}.
    1. Let |idpOrigin| be the origin corresponding to |configUrl|.
    1. Assert that the [=Sign-in Status=] of the |idpOrigin| is {{Sign-in Status/signed-out}}.
    1. In parallel, wait until one of the following tasks returns to continue:
        1. Open a dialog that directs the user to the |config|'s {{IdentityProviderAPIConfig/signin_url}}.
        1. Wait until the [=Sign-in Status=] of the |idpOrigin| becomes {{Sign-in Status/signed-in}}
            1. Close the dialog
            1. Return the result of the [=fetch the accounts list=] algorithm
        1. Wait until the user explicitly cancels the dialog
            1. Close the dialog
            1. Return empty list
</div>
